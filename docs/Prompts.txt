Du bist mein erfahrener Kollege als Python-Entwickler. Wir bauen zusammen eine Anwendung.
Lese dir die technische Doku durch. Ich würde gern mit dem Ausbau des Servers-Betriebs weiterführen.
Dazu hab ich dir den relevanten Code angehängt. Es steht der Ausbau des Websocket-Handlers an



---------------------------------


1) In der Game-Loop der Engine erhalten an definierten Stellen die Spieler die Gelegenheit, ein Tichu anzusagen oder eine Bombe zu werfen.
Die Agenten entscheiden dies in dem Moment. Der Client agiert aber proaktiv auf diese beiden Aktionen. Daher leitet der Peer die Tichu-
bzw. Bomben-Anfrage  der Engine nicht an den Client weiter, sondern holt die Tichu-Ansage oder die Bombe aus einem Nachrichtenpuffer
(sofern der Client dies zuvor gesendet hatte). Für die Engine und dem Loop macht das keinen Unterschied, d.h., diese müssen für hierfür
nicht ändern, sondern nur den Client. Lass uns das als erstes vornehmen.

2) Damit die Bombe sofort fällt (bzw. dir Tichu-Ansage sofort gehört wird), muss der aktuelle Entscheidungsprozess des Mitspielers
unterbrochen werden. Das betrifft aber nur `play` und `schupf`. Die anderen Entscheidungen dürfen lt. Spielregel nicht unterbrochen werden.
So funktioniert der Interrupt:
- Wenn der Client ein Tichu ansagt oder eine Bombe wirft, validiert, der Peer die Aktion. Wenn ok, wird die Aktion zwischengespeichert
und das Interrupt-Event gesetzt.
- Das Interrupt löst bei `play` und bei `schupf` ein InterruptError aus. U.U ist eine nochmalige Validierung notwendig, wenn sich der
Spielzustand geändert hat. Ein `continue` sollte in Game-Loop reichen, um dann den Interrupter die Aktion als nächstes ausführen lassen
zu können (hoffe ich jedenfalls).

---------------------------
Ich stell mir es so vor, so sollten wir es machen (Bsp. Bombe):

Engine-Loop fragt alle Spieler ob jemand eine Bombe werfen will. Sagen wir, keiner will.
Engine-Loop fragt Spieler A nach seinen Zug. Er überlegt (und die Engine wartet)...
Während dessen schmeißt Client B eine Bombe.
Der Peer B validiert, ob Client B das überhaupt kann, wenn ja, merkt er sich die Bombe und setzt ein Interrupt.
Der Denkprozess von Spieler A wird abgebrochen.  Die Engine fängt das InterruptError ab und wiederholt den letzten Schleifendurchlauf.
Engine-Loop fragt wieder alle Spieler ob jemand eine Bombe werfen will. Diesmal antwortet Peer B mit der Bombe.

Zur Problematik , dass 2 Spieler eine Bombe werfen:
- die Spieler werden in einer zufälligen Reihenfolge nacheinander gefragt.
- der Peer nimmt die Bombe aus dem Puffer, aber spielt sie nur, wenn das Interrupt noch nicht gesetzt ist. Wenn doch, gibt es eine
Meldung an den Client "zu spät, pech gehabt"
- nach dem Werfen der Bombe wird das Interrupt zurückgesetzt (eigentlich egal, wer das macht)

-----------

Client A und Client B senden fast gleichzeitig "interrupt_request" (Bombe) an ihre Peers (Peer_A, Peer_B).
Peer_A und Peer_B:
Beide validieren die jeweilige Bombe anhand des aktuellen Spielzustands.
Angenommen, beide Bomben sind valide.
Peer_A speichert Bombe_A in _pending_interrupt_action_A und ruft self.interrupt_event.set() auf.
Peer_B speichert Bombe_B in _pending_interrupt_action_B und ruft self.interrupt_event.set() auf.
Spieler X (der gerade in _ask war) wird unterbrochen:

Engine-Loop fängt PlayerInterruptError von Spieler X.
Engine-Loop (Interrupt-Verarbeitungsphase / neue Iteration):
Die Engine ruft nun player.get_pending_interrupt_action() für alle Spieler in einer zufälligen Reihenfolge ab.
Szenario 1: Peer_A wird zuerst gefragt:
Peer_A.get_pending_interrupt_action() wird aufgerufen.
Peer_A validiert Bombe_A final. Wenn valide:
Peer_A gibt Bombe_A an die Engine zurück und leert seinen Puffer.
self.interrupt_event wird zurückgesetzt
Engine empfängt Bombe_A.
Engine sendet notification ("bomb_played" für Bombe_A).
Spieler A ist jetzt current_turn_index.
