
1) NNet entwerfen:

Ziel: Das Netz sollte die gleichen Entscheidungen treffen wie der Heuristik-Agent und somit die gleiche Spielstärke aufweisen.

 - Eingabeparameter festlegen
 - Zielgröße festlegen
 - Erwartete Vorhersagegenauigkeit festlegen (wann ist das Netz gut genug trainiert?)
 - Architektur(en) auswählen
 - Test-, Validierungs- und Trainingsdaten durch Selbstspiel mit Heuristik-Agents generieren
 - Hyperparameter mit Keras-Tuner optimieren (Validierungsdaten dienen zum Testen)
 - Validierungsdaten zu den Trainingsdaten packen
 - NNetSV trainieren (mit Testdaten testen) (durch überwachtes Lernen, SV = Supervised)
 - Falls das Netz nicht gut genug ist:
	Falls eine Überanpassung vorliegt: weitere Trainingsdaten generieren und nochmal trainieren
	Falls keine Überanpassung vorliegt: neue Validierungsdaten generieren und nochmal Hyperparameter optimieren
 - Spielstärke im Tunier messen (NNetSV-Agent vs. Heuristik-Agent) und weitere Daten sammeln
	Falls Spielstärke noch nicht wie erwartet ist:
		Testdaten zu Trainingsdaten packen
		Falls Spielstärke bereits gut ist: Neue Daten aufteilen in Test- und Validierungsdaten
		Falls Spielstärke sehr schlecht ist: Neue Test- und Validierungsdaten durch Selbstspiel mit Heuristik-Agent generieren
		Unsd zurück auf Los :-(

 - Der NNetSV-Agent solllte nun die gleiche Spielstärke haben wie der Heuristik-Agent!

2) Vortrainiertes Netz weiter trainieren durch AlphaZero (NNet-AZ)
 - Trainieren
 - Spielstärke im Tunier messen (AZ-Agent vs. Heuristik-Agent), über alle Generationen hinweg


Diskrete Variablen
------------------
Zu unterscheiden sind folgende Arten von Eingabeparametern:

- binäre (Tichu durchgebracht)
- kategoriale (Nummer des Spielers, Typ einer Kombination)
- stetige (Siegespunkte)
- diskrete Größen (Anzahl Handarten, Kartenwert, Wert und Länge einer Kombination)

Annahme 1:
Falls die Zielvariable linear oder polynomial abhängig von der diskreten Variable ist, kann die diskrete Variable wie
eine stetige Größe als Float-Wert präsentiert werden.
Falls sich die Zielvariable eher sprunghaft in Abhängigkeit zur diskreten Variable ändert, muss die diskrete Variable
wie eine kategorische Größe per One-Hot-Kodierung präsentiert werden.

Annahme 2:
Falls die Abhängigkeit transformierbar ist (Ziel- und Eingangsvariable werden vertauscht), kann die diskrete Variable
wie eine stetige Größe als Float-Wert präsentiert werden.
Ansonsten muss die diskrete Variable wie eine kategorische Größe per One-Hot-Kodierung präsentiert werden.

Um diese Frage beantworten zu können, zeigen wir folgende Größen im Zusammenhang zur Güte der Forecast-Funktion an:
- Anzahl der eigenen Handkarten.
- Wert der Kombination im Stich (nur Einzelkarten; erlaubt Rückschluss auf Kartenwert).
- Wert der Kombination im Stich (alle Typen).
- Länge der Kombination im Stich.


Kartenkodierung
-----------------------

Kombinationen, die mit Handkarten gebildet werden können, können als Binärvekor päsentiert werden.
Dabei werden aber die Anzahl einer bestimmten Kombination und die Farben der einzelnen Karten ignoriert.

Oder man trainiert ein Netz, dass aus 56 Handkarten die möglichen Kombinationen erkennt.
Die Karten werden als "Bild" geschickt sortiert, damit diese Aufgabe einfacher wird:

  X  2  3  4  5  6  7  8  9 10 B  D  K  A    <- Kartenwert
DOG  2a 3a        ...             Da Ka Aa
MAH  2b 3b        ...             Db Kb Ab
DRA  2c 3c        ...             Dc Kc Ac
PHO  2d 3d        ...             Dd Kd Ad

Full House:
           1        1

		   1
		   1        1

U.U. ist diese Kodierung der Sonderkarten besser, da der Wert der Sonderkarte besser visualisiert wird:
    DOG PHO PH PH PH PH PH PH PH PHO PH PH PH PH DRA  <- DRA ist die höchste Karte sticht PHO; PHO kann jeden Wert annehmen
	MAH  2a 3a 4a 5a 6a 7a 8a 9a 10a Ba Da Ka Aa DRA
    MAH  2b 3b 4b 5b 6b 7b 8b 9b 10b Bb Db Kb Ab DRA
    MAH  2c 3c 4c 5c 6c 7c 8c 9c 10c Bc Dc Kc Ac DRA
    MAH  2d 3d 4d 5d 6d 7d 8d 9d 10d Bd Dd Kd Ad DRA

Statt 56 Werte sind es so 75 "Bildpunkte"
Die Werte für jedes Sonderkarten-Pixel sind:
	DOG = 1
	MAH = 1/4 = 0.25
	PHO = 1/13
	DRA = 1/5 = 0.2
Das visualisiert, dass die Sonderkarte ein größere Fläche abdeckt, aber in der Summe nur einmal existiert.



Eingabeparameter und Zielgröße festlegen
--------------------------

1) Kombination spielen (Hauptentscheidung)
	Eingabeparameter:
		Eigene Handkarten
		Noch nicht gespielten Karten (inkl. eigene Handkarten)
		Anzahl Handkarten der Gegner
		Karten im aktuellen Stich
		Punkte im aktuellen Stich
		Besitzer des aktuellen Stichs
		Geschupfte Karten
		Offener Wunsch
		Tichu-Ansagen
		Aktueller Spieler
		Gewinner (wer zuerst fertig wurde)
		Bisherige Punkte pro Spieler
		Bisheriger Score
	Ausgabe:
		Voraussichtlicher Gewinn

2) Großes Tichu ansagen
	Eingabeparameter:
		8 Handkarten
		Tichu-Ansagen
	Ausgabe:
		Wahrscheinlichkeit, als erstes fertig zu werden.
	Das Netz könnte mit Forecast-Berechnung trainiert werden (sofern Forecast verlässlich ist)
	Zur Verbesserung kann die Spielengine so modifiziert werden, dass nur solange gespielt wird, bis einer fertig ist.
	Dann Netzt mittels Selbstspiel verbessern.

3) Kleines Tichu ansagen
	Wie großes Tichu, allerdings sind die Eingabeparameter ähnlich wie bei 1.

4) Karten schupfen
	Eingabeparameter:
		14 Handkarten
	Ausgabe:
		Voraussichtliche Gewinn

5) Wert wünschen
	Eingabeparameter: ähnlich wie bei 1.
	Ausgabe: + Wahrscheinlichkeit, dass der Gegner die Karte spielen muss - Wahrscheinlichkeit, dass wir die Karte spielen müssen

6) Drachen verschenken
	Eingabeparameter: ähnlich wie bei 1.
	Ausgabe: Wahrscheinlichkeit, dass der Drache zurückkommt


