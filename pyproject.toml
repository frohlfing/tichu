[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "tichu"
version = "0.2.0"

[tool.setuptools]
packages = ["src"]

dynamic = ["dependencies"]  # auf requirements.txt verweisen

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }  # Datei aktualisieren: `pip freeze > requirements.txt`

# ------------------------------------------------------
# Konfiguration für pytest (ersetzt pytest.ini)
# pytest ausführen: `python -m pytest`

[tool.pytest.ini_options]
testpaths = ["tests"]  # Verzeichnis, in dem die Testdateien gesucht werden
asyncio_mode = "auto"  # # asynchrone Tests werden automatisch aktiviert (Marker @pytest.mark.asyncio ist hiermit nicht mehr erforderlich)
asyncio_default_fixture_loop_scope = "function"  # jede Fixture bekommt ihre eigene Event-Loop (in zukünftigen Versionen von pytest-asyncio ist dies die Standardeinstellung)
addopts = [  # Optionen, die als Kommandozeilen-Argumente übergeben werden
    "--no-header",  # entfernt die allgemeinen Infos am Anfang der pytest-Ausgabe
    "--quiet",  # reduziert die Ausgabe bei der Fortschrittsanzeige
    "--tb=short",  # verkürzt die Ausgabe der Tracebacks (Fehlermeldungen)
    "--ignore=tests/prob",  # diese Tests werden ausgelassen
]

# ------------------------------------------------------
# Konfiguration für coverage (ersetzt .coveragerc)
# coverage starten: `bin/cov.ps1`

[tool.coverage.run]  # Entspricht [run] in .coveragerc
data_file = "data/cov/.coverage"  # Coverage-Datei (SQLite)
source = ["src"]  # Verzeichnisse und Dateien, die getestet werden sollen
omit = ["_*"]  # Verzeichnisse und Dateien, die nicht getestet werden sollen

[tool.coverage.report]  # Entspricht [report] in .coveragerc
show_missing = true  # Zeilennummern der nicht abgedeckten Zeilen anzeigen
skip_empty = true  # Dateien ohne Code überspringen

[tool.coverage.html]  # Entspricht [html] in .coveragerc
directory = "data/cov/htmlcov"  # Ausgabeverzeichnis für HTML-Report

[tool.coverage.xml]  # Entspricht [xml] in .coveragerc
output = "data/cov/coverage.xml"  # Ausgabeverzeichnis für HTML-Report
